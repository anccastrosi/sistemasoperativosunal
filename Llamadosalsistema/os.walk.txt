os.walk
Genere los nombres de archivo en un árbol de directorios recorriendo el árbol de arriba hacia abajo o de abajo hacia arriba. Para cada directorio en el árbol enraizado en el directorio top (incluido top), produce una tupla de 3 tuplas (dirpath, dirnames, filenames).

dirpath es una cadena, la ruta al directorio. dirnames es una lista de los nombres de los subdirectorios en dirpath (excluyendo '.' y '..'). filenames es una lista de los nombres de los archivos que no son un directorio en dirpath. Tenga en cuenta que los nombres en las listas no contienen componentes de ruta. Para obtener una ruta completa (que comienza con top) a un archivo o directorio en dirpath, haga os.path.join(dirpath, name). El hecho de que las lista esta ordenada o no depende del sistema de archivos. Si un archivo es removido de o agregado al directorio dirpath mientras se generan las listas, no se especifica si el nombre para el archivo será incluido.

Si el argumento opcional topdown es True o no se especifica, el triple para un directorio se genera antes de triplicarse para cualquiera de sus subdirectorios (los directorios se generan de arriba hacia abajo). Si topdown es False, el triple para un directorio se genera después de los triples para todos sus subdirectorios (los directorios se generan de abajo hacia arriba). No importa el valor de topdown, la lista de subdirectorios se recupera antes de que se generen las tuplas para el directorio y sus subdirectorios.

Cuando topdown es True, la persona que llama puede modificar la lista dirnames en su lugar (quizás usando del o asignación de corte) y walk() solo se repetirá en los subdirectorios cuyos nombres permanecen en dirnames; Esto se puede utilizar para podar la búsqueda, imponer un orden específico de visitas o incluso para informar walk() sobre los directorios que la persona que llama crea o renombra antes de que se reanude walk() nuevamente. La modificación de dirnames cuando topdown es False no tiene ningún efecto en el comportamiento de la caminata, porque en el modo ascendente los directorios en dirnames se generan antes de que se genere dirpath.

Por defecto, los errores de la llamada scandir() se ignoran. Si se especifica el argumento opcional onerror, debería ser una función; se llamará con un argumento, una instancia OSError. Puede informar el error para continuar con la caminata, o generar la excepción para abortar la caminata. Tenga en cuenta que el nombre de archivo está disponible como el atributo filename del objeto de excepción.

Por defecto, walk() no entrará en enlaces simbólicos que se resuelven en directorios. Establece followlinks en True para visitar los directorios señalados por los enlaces simbólicos, en los sistemas que los admiten.

Nota Tenga en cuenta que establecer followlinks en True puede conducir a una recursión infinita si un enlace apunta a un directorio padre de sí mismo. walk() no realiza un seguimiento de los directorios que ya visitó.
Nota Si pasa un nombre de ruta relativo, no cambie el directorio de trabajo actual entre las reanudaciones de walk(). walk() nunca cambia el directorio actual, y supone que la persona que llama tampoco.
Este ejemplo muestra el número de bytes que toman los archivos que no son de directorio en cada directorio bajo el directorio inicial, excepto que no se ve en ningún subdirectorio CVS:

import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print(root, "consumes", end=" ")
    print(sum(getsize(join(root, name)) for name in files), end=" ")
    print("bytes in", len(files), "non-directory files")
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
En el siguiente ejemplo (implementación simple de shutil.rmtree()), recorrer el árbol de abajo hacia arriba es esencial, rmdir() no permite eliminar un directorio antes de que el directorio esté vacío:

# Delete everything reachable from the directory named in "top",
# assuming there are no symbolic links.
# CAUTION:  This is dangerous!  For example, if top == '/', it
# could delete all your disk files.
import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
Lanza un evento de auditoría os.spawn con argumentos top, topdown, onerror, followlinks.

Distinto en la versión 3.5: Esta función ahora llama os.scandir() en lugar de os.listdir(), lo que lo hace más rápido al reducir el número de llamadas a os.stat().

Distinto en la versión 3.6: Acepta un objeto tipo ruta.